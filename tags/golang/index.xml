<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 鬼画桃符</title><link>https://tab.deoops.com/tags/golang/</link><description>Recent content in golang on 鬼画桃符</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Feb 2023 10:57:27 +0800</lastBuildDate><atom:link href="https://tab.deoops.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>记一次overflow</title><link>https://tab.deoops.com/posts/cast-befor-opreate/</link><pubDate>Mon, 27 Feb 2023 10:57:27 +0800</pubDate><guid>https://tab.deoops.com/posts/cast-befor-opreate/</guid><description>最近给一个项目加上了限速的功能，跑了一段时间后发现一个问题，超级管理员的速度阈值本来是最大的，实际使用是却发现好想是0。 打了个个断点， 发现a</description></item><item><title>perm函数</title><link>https://tab.deoops.com/posts/rand-perm/</link><pubDate>Tue, 28 Dec 2021 10:28:03 +0800</pubDate><guid>https://tab.deoops.com/posts/rand-perm/</guid><description>工作上遇到一个问题，好奇goalng的排列数Perm是怎么实现的，看了下源代码，写的很简洁。 使用了随机交换算法来得到一个排列组合。 package rand // import &amp;#34;math/rand&amp;#34;</description></item><item><title>排列组合</title><link>https://tab.deoops.com/posts/permutation-combination/</link><pubDate>Mon, 13 Dec 2021 11:34:08 +0800</pubDate><guid>https://tab.deoops.com/posts/permutation-combination/</guid><description>上礼拜有人问我，如何从数组中选择和为n，长度为m的所有的子数组？ 问题 输入 a = []int{10, 7, -5, 4, 8, 16, 70, -30, 91} m = 3, n = 15 输出 [[10 35 -30] [-5 4 16]] 答案 算法 这是一个典</description></item><item><title>clickhouse初始化</title><link>https://tab.deoops.com/posts/clickhouse-start/</link><pubDate>Mon, 22 Nov 2021 18:39:03 +0800</pubDate><guid>https://tab.deoops.com/posts/clickhouse-start/</guid><description>总体来看clickhouse的ddl操作方式和mysql很像。比如use database_name， create user ... identified by ''等。 server docker run 启动clickh</description></item><item><title>用户线程调度模型</title><link>https://tab.deoops.com/posts/go-scheduler/</link><pubDate>Fri, 19 Nov 2021 14:44:20 +0800</pubDate><guid>https://tab.deoops.com/posts/go-scheduler/</guid><description>一般来说多线程3种并发模型： N:1， 把n个用户线程（Green threed）映射到一个操作系统的线程（OS Threed）上。 这种模型的优点是</description></item><item><title>快慢指针</title><link>https://tab.deoops.com/posts/two-points/</link><pubDate>Mon, 19 Apr 2021 19:56:53 +0800</pubDate><guid>https://tab.deoops.com/posts/two-points/</guid><description>4月份腾讯面试的时候被问到如何在空间复杂度为O（1）前提下检查连表是否为闭环： 当时没想出来，面试官提醒用快慢指针也没写出来。 回到家里想了下，</description></item><item><title>调试golang测试</title><link>https://tab.deoops.com/posts/go-test/</link><pubDate>Wed, 14 Oct 2020 18:38:01 +0800</pubDate><guid>https://tab.deoops.com/posts/go-test/</guid><description>调试某个go test程序的时候，需要实现confirm/approve功能: 测试完testCase1之后（或者说是某个断点），用户输入yes</description></item><item><title>细说kubeconfig</title><link>https://tab.deoops.com/posts/explain-kubeconfig/</link><pubDate>Sun, 11 Aug 2019 22:09:21 +0800</pubDate><guid>https://tab.deoops.com/posts/explain-kubeconfig/</guid><description>今天准备管理某一个kubernetes 集群时发现master主机22端口因为管理的需要被禁用了，无法登陆服务器。 问了一下运维人员，原来是基于</description></item><item><title>nopCloser函数</title><link>https://tab.deoops.com/posts/read-again/</link><pubDate>Wed, 17 Apr 2019 21:39:31 +0800</pubDate><guid>https://tab.deoops.com/posts/read-again/</guid><description>update: ioutil逐渐被io 取代。 package ioutil // import &amp;#34;io/ioutil&amp;#34; func NopCloser(r io.Reader) io.ReadCloser NopCloser returns a ReadCloser with a no-op Close method wrapping the provided Reader r. As of Go 1.16, this function simply calls io.NopCloser. package io // import &amp;#34;io&amp;#34; func NopCloser(r Reader) ReadCloser NopCloser returns a ReadCloser with a no-op Close method wrapping the provided Reader r.</description></item><item><title>Mysql Autocommit问题</title><link>https://tab.deoops.com/posts/mysql-autocommit/</link><pubDate>Fri, 12 Apr 2019 10:37:04 +0800</pubDate><guid>https://tab.deoops.com/posts/mysql-autocommit/</guid><description>客户反馈我们的产品有个很奇怪的问题。 添加完商品后，可以看到商品，但是一刷新页面，刚才添加的商品就消失啦。 以前没碰到过，一直都用的好好的为什么</description></item><item><title>flannel vpc</title><link>https://tab.deoops.com/posts/tx-flannel/</link><pubDate>Wed, 08 Aug 2018 18:59:00 +0800</pubDate><guid>https://tab.deoops.com/posts/tx-flannel/</guid><description>update: flannel从v0.14.0(2021/05/27)开始已经支持腾讯云的vpc backend了。 客户需要在腾讯云上部署kubernete</description></item><item><title>Makefile简介</title><link>https://tab.deoops.com/posts/makefile-tutorial/</link><pubDate>Fri, 27 Jul 2018 12:38:51 +0800</pubDate><guid>https://tab.deoops.com/posts/makefile-tutorial/</guid><description>网络上关于 makefile的教程有很多，由于我日常不是写c/c++的， 不常使用makefile，需要用的时候总是要重新Google搜索mak</description></item><item><title>init优先级</title><link>https://tab.deoops.com/posts/golang-init/</link><pubDate>Tue, 23 Jan 2018 16:23:01 +0800</pubDate><guid>https://tab.deoops.com/posts/golang-init/</guid><description>假设一个golang项目的三个源文件a.go,b.go, c.go，都定义了function inint(){}函数， 其中c.go文件初始化了一</description></item></channel></rss>